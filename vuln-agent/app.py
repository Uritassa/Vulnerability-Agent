import json
import requests
import os
import time
from datetime import datetime

class VulnerabilityAgent:
    def __init__(self, data):
        self.data = data
        self.critical_vulnerabilities = []

    def extract_critical_vulnerabilities(self):
        for item in self.data["items"]:
            metadata_name = item["metadata"]["name"]
            metadata_namespace = item["metadata"]["namespace"]
            vulnerabilities = item["report"].get("vulnerabilities", [])

            for vuln in vulnerabilities:
                if vuln["severity"] == "CRITICAL":
                    self.critical_vulnerabilities.append({
                        "name": metadata_name,
                        "k8s_namespace": metadata_namespace,
                        "installed_version": vuln["installedVersion"],
                        "fixed_version": vuln["fixedVersion"],
                        "severity": vuln["severity"],
                        "vulnerability_id": vuln["vulnerabilityID"]
                    })

    def print_critical_vulnerabilities(self):
        if not self.critical_vulnerabilities:
            print("No critical vulnerabilities found.")
            return

        for vuln in self.critical_vulnerabilities:
            print(f"Name: {vuln['name']}")
            print(f"Namespace: {vuln['k8s_namespace']}")
            print(f"  Installed Version: {vuln['installed_version']}")
            print(f"  Fixed Version: {vuln['fixed_version']}")
            print(f"  Severity: {vuln['severity']}")
            print(f"  vulnerabilityID: {vuln['vulnerability_id']}")
            print("-" * 50)  

    def send_to_opsgenie(self):
        api_key = os.getenv('API_KEY')
        url = 'https://api.opsgenie.com/v2/alerts'

        headers = {
            'Authorization': f'GenieKey {api_key}',
            'Content-Type': 'application/json'
        }

        for vuln in self.critical_vulnerabilities:
            payload = {
                "message": f"Critical Vulnerability Detected: {vuln['name']}",
                "description": f"Pod name: {vuln['name']}\nNamespace: {vuln['k8s_namespace']}\nInstalled Version: {vuln['installed_version']}\nFixed Version: {vuln['fixed_version']}\nSeverity: {vuln['severity']}\nvulnerabilityID: {vuln['vulnerability_id']}",
                "priority": "P1",  
                "tags": ["vulnerability", "critical"]
            }

            response = requests.post(url, headers=headers, json=payload)
            if response.status_code == 202:
                print(f"Alert sent to OpsGenie for {vuln['name']}")
            elif response.status_code == 429:
                print("Rate limit exceeded. Waiting before retrying...")
                time.sleep(60)  
                response = requests.post(url, headers=headers, json=payload)
                if response.status_code == 202:
                    print(f"Alert sent to OpsGenie for {vuln['name']} after retrying")
                else:
                    print(f"Failed to send alert after retrying for {vuln['name']}. Status code: {response.status_code}")
            else:
                print(f"Failed to send alert for {vuln['name']}. Status code: {response.status_code}")

            time.sleep(3)  

    def save_to_json(self, filename):
        now = datetime.now()
        date_signature = now.strftime("%Y-%m-%d")
        output_data = {
            "date": date_signature,
            "critical_vulnerabilities": self.critical_vulnerabilities
        }
        with open(filename, 'w') as f:
            json.dump(output_data, f, indent=4)

if __name__ == "__main__":
    with open('report.json', 'r') as file:
        data = json.load(file)

    vm = VulnerabilityAgent(data)

    vm.extract_critical_vulnerabilities()

    vm.print_critical_vulnerabilities()

    vm.send_to_opsgenie()

    vm.save_to_json('critical_vulnerabilities_result.json')